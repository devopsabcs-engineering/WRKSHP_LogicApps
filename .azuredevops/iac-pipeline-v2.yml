trigger:
  - main

pr: none

variables:
  - name: buildConfiguration
    value: "Release"
  - name: instanceNumber
    value: "006"
  - name: devEnvironment
    value: WRKSHP_IS_LogicApp_dev_${{ variables.instanceNumber }}
  - name: devEnvironmentApp
    value: WRKSHP_IS_LogicApp_dev_${{ variables.instanceNumber }}_logic-app
  - name: vmImage
    value: windows-latest
  - name: serviceConnection
    value: "WRKSHP_IS_ME-MngEnvMCAP675646-emknafo-1 (64c3d212-40ed-4c6d-a825-6adfbdf25dad)-4734"
  - name: resourceGroupName
    value: "rg-iac-pipeline-${{ variables.instanceNumber }}"
  - name: resourceGroupLocation
    value: "canadacentral"
  - name: templateFile
    value: infra/main.bicep
  - name: deploymentName
    value: "iac-deployment-${{ variables.instanceNumber }}"
  - name: workingDirectory
    value: "src/logic-vvihbnryoetdu"
  #- name: webAppName
  #  value: "logic-vvihbnryoetdu" # logic app name - get this from outputs of infra deployment

pool:
  vmImage: $(vmImage)

stages:
  - stage: Build
    displayName: "Build"
    jobs:
      - job: Set_tag_for_version
        displayName: set version once
        steps:
          - checkout: self
            persistCredentials: true
            fetchDepth: 0
          - task: gitversion/setup@3
            enabled: true
            displayName: "Install GitTools"
            inputs:
              versionSpec: "5.x"
          - task: gitversion/execute@3
            enabled: true
            displayName: "Calculate SemVer"
          - script: echo current version is $(GitVersion.SemVer)
            displayName: "Display calculated version"
          - task: CmdLine@2
            enabled: true
            displayName: Init git global config
            inputs:
              script: |
                git config --global user.email $(Build.RequestedForEmail)
                git config --global user.name $(Build.RequestedFor)
          - task: CmdLine@2
            enabled: true
            displayName: Create Git tag for current version
            inputs:
              script: |
                git tag -a $(GitVersion.SemVer) -m "Main version $(GitVersion.SemVer)"
                git push origin $(GitVersion.SemVer)
      - job: BuildJob
        displayName: "Build Job"
        dependsOn: Set_tag_for_version
        steps:
          - checkout: self #REDUNDANT
            persistCredentials: true
            fetchDepth: 0
          - task: gitversion/setup@3
            enabled: true
            displayName: "Install GitTools"
            inputs:
              versionSpec: "5.x"
          - task: gitversion/execute@3
            enabled: true
            displayName: "Calculate SemVer"
          - script: echo current version is $(GitVersion.SemVer)
            displayName: "Display calculated version"
          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              command: "build"
              projects: |
                $(workingDirectory)/*.csproj
              arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration $(buildConfiguration) -p:Version=$(GitVersion.SemVer) -p:FileVersion=$(GitVersion.AssemblySemFileVer) -p:AssemblyVersion=$(GitVersion.AssemblySemVer)
          - task: ArchiveFiles@2
            displayName: "Archive files"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/publish_output"
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            artifact: drop
  - stage: DeployInfra
    displayName: "Deploy Infrastructure"
    dependsOn: Build
    jobs:
      - deployment: DeployInfraJob
        displayName: "Deploy Infrastructure Job"
        environment: $(devEnvironment)
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                # azure cli task to login to azure
                - task: AzureCLI@2
                  displayName: "deploy infrastructure using bicep"
                  name: deployInfraWebApp
                  inputs:
                    azureSubscription: "$(serviceConnection)"
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      az account show
                      az group create --name $(resourceGroupName) `
                        --location $(resourceGroupLocation)
                      # deploy
                      az deployment group create --resource-group $(resourceGroupName) `
                        --template-file $(templateFile) `
                        --name $(deploymentName)
                      # get logic app name
                      $logicAppName = az deployment group show --resource-group $(resourceGroupName) `
                        --name $(deploymentName) `
                        --query properties.outputs.logicAppName.value `
                        -o tsv
                      echo $logicAppName
                      Write-Host "##vso[task.setvariable variable=webAppName;isOutput=true]$logicAppName"
                # echo the logic app name
                - powershell: |
                    Write-Host $(deployInfraWebApp.webAppName)
                  displayName: "Echo Logic App Name"
  - stage: DeployLogicApp
    displayName: "Deploy Logic App"
    dependsOn: DeployInfra
    variables:
      webAppName: $[ stageDependencies.DeployInfra.DeployInfraJob.outputs['deployInfraWebApp.webAppName'] ]
    jobs:
      - deployment: DeployLogicAppJob
        displayName: "Deploy Logic App Job"
        environment: $(devEnvironmentApp)
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: AzureCLI@2
                  displayName: "Retrieve Logic App Name"
                  name: retrieveLogicAppName
                  inputs:
                    azureSubscription: "$(serviceConnection)"
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      az account show                      
                      # get logic app name
                      $logicAppName = az deployment group show --resource-group $(resourceGroupName) `
                        --name $(deploymentName) `
                        --query properties.outputs.logicAppName.value `
                        -o tsv
                      echo $logicAppName
                      Write-Host "##vso[task.setvariable variable=webAppName;isOutput=true]$logicAppName"
                # echo the logic app name
                - powershell: |
                    Write-Host $(retrieveLogicAppName.webAppName)
                  displayName: "Echo Logic App Name"
                # echo the logic app name
                - powershell: |
                    Write-Host $(webAppName)
                  displayName: "Echo Logic App Name Again"
                - task: AzureRmWebAppDeployment@4
                  displayName: "Deploy Logic App"
                  inputs:
                    ConnectionType: "AzureRM"
                    azureSubscription: "$(serviceConnection)"
                    appType: "webApp"
                    WebAppName: "$(retrieveLogicAppName.webAppName)"
                    packageForLinux: "$(Pipeline.Workspace)/drop/*.zip"
                    enableCustomDeployment: true
                    DeploymentType: "webDeploy"
                    TakeAppOfflineFlag: false
